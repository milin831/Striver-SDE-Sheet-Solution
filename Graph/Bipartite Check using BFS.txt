class Solution {
//     BFS solution
//     0  ->  not colored
//     1  -> blue
//     -1  ->  red
    public boolean isBipartite(int[][] graph) {
        int len = graph.length;
        int[] colors = new int[len];			
				
        for (int i = 0; i < len; i++) {
            if(colors[i]==0){
                Queue<Integer> q=new LinkedList<>();
                q.add(i);   
                colors[i]=1;
                while(!q.isEmpty()){
                    Integer node=q.poll();
                    for(int n : graph[node]){
                        if(colors[n]==colors[node]) return false;
                        else if(colors[n]==0){
                            q.add(n);
                            colors[n]=-colors[node];
                        }
                    }
                }
            }
        }
        return true;
    }
    
    public boolean validColor(int[][] graph, int[] colors, int color, int node) {
        if (colors[node] != 0) {
            return colors[node] == color;
        }       
        colors[node] = color;       
        for (int next : graph[node]) {
            if (!validColor(graph, colors, -color, next)) return false;
        }
        return true;
    }
}