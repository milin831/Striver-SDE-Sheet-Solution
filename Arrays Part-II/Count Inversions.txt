import java.util.* ;
import java.io.*; 
public class Solution {
   static long merge(long arr[],int start,int mid,int end){
        int i=start,j=mid,k=0;
        long inversion_count=0;
        long temp[]=new long[(end-start+1)];
        while((i<mid) && (j<=end)){
            if(arr[i]<=arr[j])
                temp[k++]=arr[i++];
            else{
                temp[k++]=arr[j++];
                inversion_count+=(mid-i);
            }
        }
        while(i<mid)
            temp[k++]=arr[i++];
        while(j<=end)
            temp[k++]=arr[j++];
        for(i=start,k=0;i<=end;i++,k++)
            arr[i]=temp[k];
        return inversion_count;
        
    }
    static long mergeSort(long arr[], int start,int end){
        long inversion_count=0;
        if(end>start){
            int mid=(start+end)/2;
            inversion_count=mergeSort(arr,start,mid);
            inversion_count+=mergeSort(arr,mid+1,end);
            inversion_count+=merge(arr,start,mid+1,end);
        }
        return inversion_count; 
    }
    public static long getInversions(long arr[], int n) {
        return mergeSort(arr,0,n-1);
    }
}